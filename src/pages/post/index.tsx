import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { type FC, useState } from "react";
import { api } from "../../utils/api";
import dynamic from "next/dynamic";

const QuillNoSSRWrapper = dynamic(() => import("react-quill"), {
  ssr: false,
  loading: () => <p>Loading ...</p>,
});

const modules = {
  toolbar: [
    [{ header: "1" }, { header: "2" }, { font: [] }],
    [{ size: [] }],
    ["bold", "italic", "underline", "strike", "blockquote", "code-block"],
    [
      { list: "ordered" },
      { list: "bullet" },
      { indent: "-1" },
      { indent: "+1" },
    ],
    ["link", "image", "video"],
    ["clean"],
  ],
  clipboard: {
    // toggle to add extra line breaks when pasting HTML:
    matchVisual: false,
  },
};
/*
 * Quill editor formats
 * See https://quilljs.com/docs/formats/
 */
const formats = [
  "header",
  "font",
  "size",
  "bold",
  "italic",
  "underline",
  "strike",
  "blockquote",
  "code-block",
  "list",
  "bullet",
  "indent",
  "link",
  "image",
  "video",
];

type tags = {
  id: string | undefined;
  desc: string;
};
const FormPost: FC = () => {
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [tag, setTag] = useState("");
  const [tags, setTags] = useState<tags[]>([]);
  const { data: session, status } = useSession();

  const utils = api.useContext();
  const postMessage = api.post.postMessage.useMutation({
    onSettled: async () => {
      await utils.post.getAll.invalidate();
    },
  });

  return status === "authenticated" ? (
    <form
      className="m-auto w-9/12"
      onSubmit={(event) => {
        event.preventDefault();
        postMessage.mutate({
          title,
          tag: tags,
          content,
        });
        setTitle("");
        setTags([]);
        setContent("");
      }}
    >
      <div className="flex flex-col">
        <div className="flex flex-col">
          <input
            type="text"
            className="rounded-md border-2 border-zinc-800 px-4 py-2 focus:outline-none"
            placeholder="title"
            minLength={2}
            maxLength={100}
            value={title}
            onChange={(event) => setTitle(event.target.value)}
          />
        </div>
        <div className="mb-20 flex w-full flex-col">
          {/* <input
            type="text"
            className="rounded-md border-2 border-zinc-800 px-4 py-2 focus:outline-none"
            placeholder="Your message..."
            minLength={2}
            maxLength={100}
            value={content}
            onChange={(event) => setContent(event.target.value)}
          /> */}
          <QuillNoSSRWrapper
            modules={modules}
            formats={formats}
            onChange={setContent}
            theme="snow"
          />
        </div>
        <div className="flex flex-col">
          {tags?.map((entry: tags, index) => (
            <div key={index}>
              <p>{entry.desc}</p>
            </div>
          ))}
          <div className="flex flex-row">
            <input
              type="text"
              className="rounded-md border-2 border-zinc-800 px-4 py-2 focus:outline-none"
              placeholder="tag1"
              minLength={2}
              maxLength={100}
              value={tag}
              onChange={(event) => setTag(event.target.value)}
            />
            <div className="flex flex-row">
              <div
                className="rounded-md border-2 border-zinc-800 p-2 focus:outline-none"
                onClick={(e) => {
                  e.preventDefault();
                  setTags([...tags, { id: undefined, desc: tag }]);
                  setTag("");
                }}
              >
                ADD
              </div>
            </div>
          </div>
        </div>
        <button
          type="submit"
          className="rounded-md border-2 border-zinc-800 p-2 focus:outline-none"
        >
          Submit
        </button>
      </div>
    </form>
  ) : null;
};

// const PostEntries: FC = () => {
//   const { data: postEntries, isLoading } = api.post.getAll.useQuery();

//   if (isLoading) {
//     return <div>Fetching messages...</div>;
//   }

//   return (
//     <div className="flex flex-col gap-4">
//       {postEntries?.map((entry, index) => (
//         <div key={index}>
//           <p>{entry.content}</p>
//           {entry.tag.map((obj, idx) => (<span key={idx} className="pr-2">{obj.desc}</span>))}
//         </div>
//       ))}
//     </div>
//   );
// };

const Home: NextPage = () => {
  const { data: session, status } = useSession();

  if (status === "loading") {
    return <main className="flex flex-col items-center pt-4">Loading...</main>;
  }

  return (
    <div className="mx-10 mt-8 flex flex-row justify-center bg-white p-10">
      <Head>
        <title>post</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex w-full flex-col items-center">
        <h1 className="pt-4 text-3xl">Create New Post</h1>

        <div className="w-full pt-10">
          <div>
            {session ? (
              <>
                <p className="mb-4 text-center">hi {session.user?.name}</p>
                <button
                  type="button"
                  className="mx-auto block rounded-md border-2 border-zinc-800 py-3 px-6 text-center hover:bg-neutral-700"
                  onClick={() => {
                    signOut().catch(console.log);
                  }}
                >
                  Logout
                </button>
                <div className="w-full pt-6">
                  <FormPost />
                </div>
              </>
            ) : (
              <button
                type="button"
                className="mx-auto block rounded-md py-3 px-6 text-center hover:bg-neutral-700"
                onClick={() => {
                  signIn("discord").catch(console.log);
                }}
              >
                Login with Discord
              </button>
            )}
            {/* <div className="pt-10">
              <PostEntries />
            </div> */}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;
